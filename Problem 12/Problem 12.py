### Project Euler
### Problem 12

#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.

#What is the value of the first triangle number to have over five hundred divisors?

# Notes
# We essentially just need a function to count a number's divisors, and then iterate through triangle numbers until we find one with a sufficient number

from math import sqrt

# Recursive function to count the number of divisors of n. 
def countDivisors(n):
    
    divisors = []
    
    for i in range(1, int(sqrt(n))+1):
        # It can easily be shown that any divisor above sqrt(n) has a corresponding divisor below sqrt(n), so the number of checks can be decreased a lot
        if (n % i) == 0:
            # If n is divis by i
            divisors.append(i)          # Add i to list
            if i != sqrt(n):
                divisors.append(n//i)   # Add corresponding divisor to list, so long as it's not the square root (i.e. we don't want repeated divisors)

    return len(divisors)

# Now just iteratively check each triangle number until we find one with >500 divisors

numDivs = 0
nextTriNum = 0
counter = 1

while numDivs <= 500:

    # Move to next triangle number and increase counter
    nextTriNum += counter
    counter += 1

    # Count the divisors of the next triangle number
    numDivs = countDivisors(nextTriNum)

# Print the Triangle number once we have more than 500 divisors
print(nextTriNum)
# Solution = 76576500
